#!/usr/bin/env python

def nobbed(iterable, keys):
    curr_keys, nobs = [], []
    for fields in iterable:
        temp_keys = [ fields[i] for i in keys ]
        if  temp_keys  == curr_keys:
            for i in range(len(fields)):
                if i not in keys:
                    nobs[i].append(fields[i]) 
        else:
            if curr_keys:
                yield nobs
            curr_keys, nobs = temp_keys, []
            for i in range(len(fields)):
                if i in keys:
                    nobs.append(fields[i])
                else:
                    nobs.append([fields[i]])
    if nobs: 
        yield nobs

if __name__ == '__main__':
    import sys, getopt
    
    if sys.version_info[:2] <= (2, 2):
        sys.exit("Can't work under Python <= (2.2), and please install higher version")
    elif sys.version_info[:2] == (2, 3):
        from sets import Set as set
    else:
        pass

    try:
        opts, args = getopt.getopt(sys.argv[1:], 'k:m:')
    except:
        raise
    else:
        dopts = dict(opts)
    
    if '-k' in dopts:
        keys = [ int(i)-1 for i in dopts['-k'].split(',') ]
    else:
        keys = [0]

    meths = []
    if '-m' in dopts:
        for o in dopts['-m'].split('::'):
            if o == 'sum':
                meths.append(lambda seq: '%d' % sum([ float(i) for i in seq ]))
            elif o == 'ave':
                meths.append(lambda seq: '%g' % (sum([ float(i) for i in seq ])/len(seq)))
            elif o == 'cnt':
                meths.append(lambda seq: '%i' % len(seq))
            elif o.startswith('idx'):
                if ':' in o:
                    idx = int(o.split(':')[1]) - 1
                else:
                    idx = 0
                meths.append(lambda seq: seq[idx])
            else:
                meths.append(','.join)
    else:
        meths.append(','.join)

    for fields in nobbed([ l.rstrip().split('\t') for l in sys.stdin ], keys):
        print '\t'.join([ type(i) in (list,set,tuple) and '\t'.join([ m(i) for m in meths ]) or i for i in fields ])
